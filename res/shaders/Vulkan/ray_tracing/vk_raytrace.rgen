#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "payload_data.glsl"
#include "utlas.glsl"
#include "uimage.glsl"
#include "urtbasic.glsl"

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin    = rtBasic.view * vec4(0, 0, 0, 1);
    vec4 target    = rtBasic.projection * vec4(d.x, d.y, 1, 1);
    vec4 direction = rtBasic.view * vec4(normalize(target.xyz), 0);
    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.mDepth = 0;
    prd.mHitValue = vec3(0);
    prd.mAttenuation = vec3(1.0);
    prd.mDone = 1;
    prd.mOrigin = origin.xyz;
    prd.mDir = direction.xyz;

    vec3 hitValue = vec3(0.0);

    for (;;)
    {
        traceRayEXT(
            topLevelAS,     // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );

        hitValue += prd.mHitValue * prd.mAttenuation;
        prd.mDepth++;

        if (prd.mDone == 1 || prd.mDepth > 10)
            break;
        
        origin.xyz = prd.mOrigin;
        direction.xyz = prd.mDir;
        prd.mDone = 1;
    }

    const ivec2 p = ivec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y-gl_LaunchIDEXT.y);

    imageStore(image, p, vec4(hitValue, 1.0));
}
