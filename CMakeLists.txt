# CMAKE VERSION
cmake_minimum_required(VERSION 3.15...3.17)

# PROJECT DECLARATION
project(
	"ERM"
	VERSION 0.0.1
	DESCRIPTION "C++ Game Engine"
	LANGUAGES CXX
)

# BUILD TYPE
if(NOT DEFINED CMAKE_BUILD_TYPE OR (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" AND NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release"))
	set(CMAKE_BUILD_TYPE "Debug")
endif()
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)

# INSTALL OPTIONS
set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/bin")

# C++ OPTIONS
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")

# IDEs FRIENDLY
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# SETUP CMAKE_MODULE_PATH
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(macros)
include(ERMConfig)

# SETUP TARGET API
setup_api()
message(STATUS "Using ${TARGET_API} APIs")

# ADD DEPENDENCIES BASED ON TARGET API
if("${TARGET_API}" STREQUAL "OpenGl")
	include(GLEWConfig)
	add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/glew-cmake")
	set(GLEW_LIBRARY libglew_static)
	set(PUBLIC_DEPENDENCIES "${GLEW_LIBRARY}")
elseif("${TARGET_API}" STREQUAL "Vulkan")
	add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/Vulkan-Hpp")
	set(VULKAN_HPP_INSTALL TRUE)
endif()

# INCLUDE CONFIGURATION FILES FOR DEPENDENCIES
include(GLMConfig)
include(GLFWConfig)
include(TinyXmlConfig)
include(FindFbx)

find_package(Fbx)
if(NOT ${FBX_FOUND})
	message(WARNING "Cannot find FBX libraries")
else()
	set(ERM_FBX_ENABLED TRUE)
	list(APPEND PRIVATE_DEBUG_DEPENDENCIES "${FBX_LIBRARIES_DEBUG}")
	list(APPEND PRIVATE_RELEASE_DEPENDENCIES "${FBX_LIBRARIES}")
endif(NOT ${FBX_FOUND})

# ADDS COMMON EXTERNALS DEPENDENCIES
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/glm")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/glfw")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/imgui")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/tinyxml")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/stb_image")
add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/externals/SPIRV-Cross")

# GATHER SOURCES
file(GLOB_RECURSE SOURCES 
	"${CMAKE_CURRENT_SOURCE_DIR}/include/common/*.h"
	"${CMAKE_CURRENT_SOURCE_DIR}/include/${TARGET_API}/*.h"
	"${CMAKE_CURRENT_SOURCE_DIR}/src/common/*.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/src/${TARGET_API}/*.cpp"
)
create_groups("${SOURCES}")

# CREATE EXECUTABLE IF STANDALONE, LIBRARY OTHERWISE
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
	add_executable("${PROJECT_NAME}" "${SOURCES}")
else()
	add_library("${PROJECT_NAME}" "${SOURCES}")
endif("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")

# SETUP PLATFORM SPECIFIC OPTIONS
if(MSVC OR WIN)
	include(MSVCConfig)
elseif(XCODE OR APPLE)
	include(OSXConfig)
else()
	message(FATAL_ERROR "Unsupported Platform")
endif()
target_setup_project("${PROJECT_NAME}")

# CUSTOM PROPERTIES
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(RES_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/res")
set(RES_DEST "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/res")

# TARGET INCLUDE DIRECTORIES
target_include_directories(
	"${PROJECT_NAME}"
	PRIVATE
		"${TARGET_API_INCLUDE_DIR}"
		"${PRIVATE_INCLUDES}"
		"${CMAKE_CURRENT_SOURCE_DIR}/include/common/"
		"${CMAKE_CURRENT_SOURCE_DIR}/include/${TARGET_API}/"
		$<$<BOOL:${ERM_FBX_ENABLED}>:${FBX_INCLUDE_DIRS}>
	PUBLIC 
		"${PUBLIC_INCLUDES}"
)

# TARGET COMMON CONFIGURATIONS
target_compile_definitions(
	"${PROJECT_NAME}"
	PUBLIC
		$<$<STREQUAL:"${TARGET_API}","Vulkan">:GLM_FORCE_DEPTH_ZERO_TO_ONE>
		$<$<STREQUAL:"${TARGET_API}","Vulkan">:IMGUI_DISABLE_OBSOLETE_FUNCTIONS>
		$<$<BOOL:${ERM_FLIP_PROJECTION}>:ERM_FLIP_PROJECTION>
		$<$<BOOL:${ERM_FLIP_VIEWPORT}>:ERM_FLIP_VIEWPORT>
		$<$<BOOL:${ERM_FBX_ENABLED}>:ERM_FBX_ENABLED>
		${TARGET_API_COMPILE_DEF}
	PRIVATE
		$<$<STREQUAL:"${TARGET_API}","OpenGl">:GLEW_STATIC>
		$<$<STREQUAL:"${TARGET_API}","Vulkan">:ERM_SHADER_COMPILER="${SHADERS_COMPILER}">
)

# TARGET COMMON FEATURES
target_compile_features(
	"${PROJECT_NAME}"
	PUBLIC 
		cxx_std_17
)

# TARGET COMMON PROPERTIES
set_target_properties(
	"${PROJECT_NAME}" 
	PROPERTIES
		CXX_STANDARD 17
		CXX_EXTENSIONS OFF
		ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib"
		LIBRARY_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib"
		RUNTIME_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/bin"
)

# LINK LIBRARIES
target_link_libraries(
	"${PROJECT_NAME}"
	PRIVATE 
		"${TARGET_API_LIB}"
		glfw
		stb_image
		spirv-cross-cpp
		debug "${PRIVATE_DEBUG_DEPENDENCIES}"
		optimized "${PRIVATE_RELEASE_DEPENDENCIES}"
	PUBLIC 
		"${PUBLIC_DEPENDENCIES}"
		glm
		imgui
		tinyxml2
)

# CUSTOM TARGETS
set(PIPELINE_ARGS --res-dest ${RES_DEST} --res-src ${RES_SOURCE})

if("${TARGET_API}" STREQUAL "Vulkan")
	list(APPEND PIPELINE_ARGS --shaders-compiler ${SHADERS_COMPILER})
endif("${TARGET_API}" STREQUAL "Vulkan")

set(PIPELINE_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/resources_pipeline.py")

add_custom_target(
	PIPELINE
	COMMAND ${PYTHON_EXECUTABLE} ${PIPELINE_SCRIPT} ${PIPELINE_ARGS}
	COMMENT "Resources Pipeline"
)
add_dependencies("${PROJECT_NAME}" PIPELINE)

# DEBUG PRINT VARIABLES
if("${PRINT_VARIABLES}")
	get_cmake_property(VARIABLE_NAMES VARIABLES)
	list (SORT VARIABLE_NAMES)
	foreach(VARIABLE_NAME ${VARIABLE_NAMES})
    	message(STATUS "${VARIABLE_NAME}=${${VARIABLE_NAME}}")
	endforeach(VARIABLE_NAME ${VARIABLE_NAMES})

	execute_process(COMMAND "${CMAKE_COMMAND}" "-E" "environment")
endif("${PRINT_VARIABLES}")
